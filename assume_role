#!/usr/bin/env bash
set -e

# Clear out existing AWS session environment, or the awscli call will fail
unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN
# Old ec2 tools use other env vars
unset AWS_ACCESS_KEY AWS_SECRET_KEY AWS_DELEGATION_TOKEN

SERIAL=$3
ROLE=$2
ACCOUNT=$1

if [ -z $SERIAL ]; then
  KST="$(aws sts assume-role --role-arn "arn:aws:iam::$ACCOUNT:role/$ROLE" --role-session-name "Session1")"
else
  read -p "Enter the token code: " token
  KST="$(aws sts assume-role --role-arn="arn:aws:iam::$ACCOUNT:role/$ROLE" --role-session-name="Session1" --token-code="${token}" --serial-number=${SERIAL})"
fi

export AWS_ACCESS_KEY_ID=$(jq -r ".Credentials.AccessKeyId" <<< $KST)
export AWS_ACCESS_KEY=$(jq -r ".Credentials.AccessKeyId" <<< $KST)

export AWS_SECRET_ACCESS_KEY=$(jq -r ".Credentials.SecretAccessKey" <<< $KST)
export AWS_SECRET_KEY=$(jq -r ".Credentials.SecretAccessKey" <<< $KST)

export AWS_SESSION_TOKEN=$(jq -r ".Credentials.SessionToken" <<< $KST)
export AWS_SECURITY_TOKEN=$(jq -r ".Credentials.SessionToken" <<< $KST)
