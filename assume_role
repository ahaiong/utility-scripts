#!/usr/bin/env bash
set -e

# Clear out existing AWS session environment, or the awscli call will fail
unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN
# Old ec2 tools use other env vars
unset AWS_ACCESS_KEY AWS_SECRET_KEY AWS_DELEGATION_TOKEN

SERIAL=$3
ROLE=$2
ACCOUNT=$1

if [ -z $SERIAL ]; then
  KST="$(aws sts assume-role --role-arn "arn:aws:iam::$ACCOUNT:role/$ROLE" --role-session-name "Session1" --output text)"
else
  read -p "Enter the token code: " token
  echo "aws sts assume-role --role-arn=\"arn:aws:iam::$ACCOUNT:role/$ROLE\" --role-session-name=\"Session1\" --token-code=${token} --output=text --serial-number=\"${SERIAL}\"" 
  KST="$(aws sts assume-role --role-arn="arn:aws:iam::$ACCOUNT:role/$ROLE" --role-session-name="Session1" --token-code="${token}" --output=text --serial-number=${SERIAL})"
fi

arr=($KST)

export AWS_DEFAULT_REGION=ap-southeast-2
#export AWS_DEFAULT_REGION=eu-west-1
export AWS_ACCESS_KEY_ID=${arr[4]}
export AWS_ACCESS_KEY=${arr[4]}
export AWS_SECRET_ACCESS_KEY=${arr[6]}
export AWS_SECRET_KEY=${arr[6]}
export AWS_SESSION_TOKEN=${arr[7]}      # older var seems to work the same way
export AWS_SECURITY_TOKEN=${arr[7]}
